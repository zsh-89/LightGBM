variables:
  PYTHON_VERSION: 3.7
  CONDA_ENV: test-env
phases:
###########################################
- phase: Linux
###########################################
  variables:
    COMPILER: gcc
  queue:
    name: 'Hosted Linux Preview'
    parallel: 6
    matrix:
      regular:
        TASK: regular
      sdist:
        TASK: sdist
        PYTHON_VERSION: 3.5
      bdist:
        TASK: bdist
        PYTHON_VERSION: 3.6
      inference:
        TASK: if-else
      mpi_source:
        TASK: mpi
        METHOD: source
        PYTHON_VERSION: 2.7
      gpu_source:
        TASK: gpu
        METHOD: source
        PYTHON_VERSION: 3.6
  steps:
  - task: CondaEnvironment@0
    inputs:
      updateConda: true
      environmentName: $(CONDA_ENV)
      packageSpecs: 'python=$(PYTHON_VERSION)'
      createOptions: '-q'
  - script: |
      echo "##vso[task.setvariable variable=LGB_VER]$(head -n 1 VERSION.txt)"
      AMDAPPSDK_PATH=$AGENT_HOMEDIRECTORY/AMDAPPSDK
      echo "##vso[task.setvariable variable=AMDAPPSDK_PATH]$AMDAPPSDK_PATH"
      LD_LIBRARY_PATH=$AMDAPPSDK_PATH/lib/x86_64:$LD_LIBRARY_PATH
      echo "##vso[task.setvariable variable=LD_LIBRARY_PATH]$LD_LIBRARY_PATH"
      echo "##vso[task.setvariable variable=OPENCL_VENDOR_PATH]$AMDAPPSDK_PATH/etc/OpenCL/vendors"
      chmod +x $BUILD_SOURCESDIRECTORY/.vsts-ci/setup.sh
      chmod +x $BUILD_SOURCESDIRECTORY/.vsts-ci/test.sh
    displayName: 'Set variables'
  - bash: $(Build.SourcesDirectory)/.vsts-ci/setup.sh
    displayName: Setup
  - bash: $(Build.SourcesDirectory)/.vsts-ci/test.sh
    displayName: Test
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: PackageAssets
      artifactType: container
###########################################
- phase: MacOS
###########################################
  queue:
    name: 'Hosted macOS Preview'
    parallel: 3
    matrix:
      regular:
        TASK: regular
        PYTHON_VERSION: 2.7
      sdist:
        TASK: sdist
        PYTHON_VERSION: 3.4
      bdist:
        TASK: bdist
        PYTHON_VERSION: 3.5
  steps:
  - script: |
      brew install libomp
      brew reinstall cmake
      wget -O conda.sh https://repo.continuum.io/miniconda/Miniconda${PYTHON_VERSION:0:1}-latest-MacOSX-x86_64.sh
      bash conda.sh -b -p $HOME/miniconda
      export PATH=$HOME/miniconda/bin:$PATH
      conda config --set always_yes yes --set changeps1 no
      conda create -q -n $CONDA_ENV python=$PYTHON_VERSION
      source activate $CONDA_ENV
      export LGB_VER=$(head -n 1 VERSION.txt)
      bash .vsts-ci/test.sh
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: PackageAssets
      artifactType: container
###########################################
- phase: Windows
###########################################
  queue:
    name: 'Hosted VS2017'
    parallel: 3
    matrix:
      regular:
        TASK: regular
        PYTHON_VERSION: 3.5
      sdist:
        TASK: sdist
        PYTHON_VERSION: 2.7
      bdist:
        TASK: bdist
        PYTHON_VERSION: 3.6
  steps:
  - task: CondaEnvironment@0
    inputs:
      updateConda: true
      environmentName: $(CONDA_ENV)
      packageSpecs: 'python=$(PYTHON_VERSION) numpy nose scipy scikit-learn pandas matplotlib python-graphviz pytest'
      createOptions: '-q'
  - powershell: $(Build.SourcesDirectory)/.vsts-ci/test_windows.ps1
    displayName: Test
  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: PackageAssets
      artifactType: container

###########################################
- phase: Package
###########################################
  dependsOn:
  - Linux
  - MacOS
  - Windows
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  queue:
    name: 'Hosted VS2017'
  steps:
  # Download all agent packages from all previous phases
  - task: DownloadBuildArtifacts@0
    displayName: Download package assets
    inputs:
      artifactName: PackageAssets
      downloadPath: $(Build.SourcesDirectory)/binaries
  - powershell: |
      $client = new-object System.Net.WebClient
      $client.DownloadFile("https://dist.nuget.org/win-x86-commandline/latest/nuget.exe", "$(Build.SourcesDirectory)/.nuget/nuget.exe")
    displayName: 'Download NuGet application'
  - script: |
      cd %BUILD_SOURCESDIRECTORY%/.nuget
      python create_nuget.py %BUILD_SOURCESDIRECTORY%/binaries/PackageAssets
      nuget.exe pack LightGBM.nuspec
      xcopy *.nupkg %BUILD_ARTIFACTSTAGINGDIRECTORY%
    displayName: 'Build NuGet package'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: Nuget
      artifactType: container
